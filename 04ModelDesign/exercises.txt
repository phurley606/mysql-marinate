1. When would you use a weak entity?


A weak entity (child) is a sub-ordinate entity of another entity (parent).
It is partially identified by reference to its parent.
For example if I ordered 3 items from Amazon at the same time, 
then each of those items is a weak entity with the order itself as their parent. 
To identify each order item we need the identifier of the parent order 
combined with further details to identify each individual item (e.g. order item number).



2. Is it better to use entities instead of attributes?


We need to use both entities and attributes to model the real world in computer systems.
An entity is an object we are interested in and an attribute is an aspect of it.
For example, a system used in a book shop, could have an entity named Book with attributes 
identifying a book's title, author and publication date.



3. Alter and extend the music database ER model so that it can store 
compilations, where a compilation is an album that contains tracks by two 
or more different artists.

The file "Learning MySQL 4-3.jpg" contains my entity relationship model for this question.

Album:
Remove artist_id and foreign key to Artist
Make primary key just album_id

Artist:
leave unchanged

Track (this changes subtly to become a table which resolves the many-to-many 
relationship between Artist and Album):
Remove artist_id from foreign key to Album

Played:
Remove artist_id from foreign key to Album


CREATE TABLE artist (
    artist_id SMALLINT(5) NOT NULL DEFAULT 0,
    artist_name CHAR(128) DEFAULT NULL,
    PRIMARY KEY (artist_id)
) engine=innoDB;

CREATE TABLE album (
    album_id SMALLINT(4) NOT NULL DEFAULT 0,
    album_name CHAR(128) DEFAULT NULL,
    PRIMARY KEY (album_id)
) engine=innoDB;

CREATE TABLE track (
    track_id SMALLINT(3) NOT NULL DEFAULT 0,
    track_name CHAR(128) DEFAULT NULL,
    artist_id SMALLINT(5) NOT NULL DEFAULT 0,
    album_id SMALLINT(4) NOT NULL DEFAULT 0,
    time DECIMAL(5,2) DEFAULT NULL,
    PRIMARY KEY (artist_id,album_id,track_id),
    FOREIGN KEY (artist_id) REFERENCES artist(artist_id),
    FOREIGN KEY (album_id) REFERENCES album(album_id)
) engine=innoDB;

CREATE TABLE played (
    artist_id SMALLINT(5) NOT NULL DEFAULT 0,
    album_id SMALLINT(4) NOT NULL DEFAULT 0,
    track_id SMALLINT(3) NOT NULL DEFAULT 0,
    played TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,
    PRIMARY KEY (artist_id,album_id,track_id,played),
    FOREIGN KEY (artist_id)			 REFERENCES artist(artist_id),
    FOREIGN KEY (album_id) REFERENCES album(album_id),
    FOREIGN KEY (artist_id,album_id,track_id)	REFERENCES track(artist_id,album_id,track_id)
) engine=innoDB;


The changes I have made create a data model which is now better suited to storing compilation
albums than single-artist albums. A better compromise may be to store a flag on
the album table to indicate whether it is a compilation or single-artist album. 
If single-artist, the album table could contain a foreign-key to the artist, 
which would be null for compilations.



4. Create an ER diagram for an online media store using the following requirements:
 - There are two types of product: music CDs and video DVDs.
 - Customers can buy any number of each product.
 - For each CD, store the title, the artistâ€™s name, the label (publisher), 
   and the price. Also store the number, title, and length (in seconds) 
   of each track on the CD.
 - For each video DVD, store the title the studio name, and the price.


The file "Learning MySQL 4-4.jpg" contains my entity relationship model for this question.


