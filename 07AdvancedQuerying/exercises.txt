Even though on page 238 the book says it does not matter if you put 
JOIN conditions in ON or WHERE clauses, the advantage to putting them 
in the ON clause is that it is easy to see if you missed a JOIN clause. 
It is also required in some outer join situations (LEFT or RIGHT joins).

For these exercises, use the "music" database.

1) Write a JOIN query that displays the name of each artist and the albums
they've made. Alongside the album, display the number of tracks on the album.

select artist_name, album_name, count(*) as tracks from artist 
inner join album using (artist_id) 
inner join track using (artist_id,album_id) 
group by artist_name, album_name;

+---------------------------+------------------------------------------+--------+
| artist_name               | album_name                               | tracks |
+---------------------------+------------------------------------------+--------+
| Kylie Minogue             | Light Years                              |     13 |
| Leftfield                 | Leftism                                  |     11 |
| Miles Davis               | In A Silent Way                          |      2 |
| Miles Davis               | Live Around The World                    |     11 |
| New Order                 | Brotherhood                              |     10 |
| New Order                 | Power, Corruption & Lies                 |      8 |
| New Order                 | Retro - John McCready FAN                |     15 |
| New Order                 | Retro - Miranda Sawyer POP               |     14 |
| New Order                 | Retro - New Order / Bobby Gillespie LIVE |     15 |
| New Order                 | Substance (Disc 2)                       |     12 |
| New Order                 | Substance 1987 (Disc 1)                  |     12 |
| Nick Cave & The Bad Seeds | Let Love In                              |     10 |
| The Rolling Stones        | Exile On Main Street                     |     18 |
| The Stone Roses           | Second Coming                            |     13 |
+---------------------------+------------------------------------------+--------+
14 rows in set (0.00 sec)


2) Repeat Question 1, but now display only those albums that have more
than 10 tracks

select artist_name, album_name, count(*) as tracks from artist
inner join album using (artist_id)
inner join track using (artist_id,album_id)
group by artist_name, album_name
having tracks > 10;

+--------------------+------------------------------------------+--------+
| artist_name        | album_name                               | tracks |
+--------------------+------------------------------------------+--------+
| Kylie Minogue      | Light Years                              |     13 |
| Leftfield          | Leftism                                  |     11 |
| Miles Davis        | Live Around The World                    |     11 |
| New Order          | Retro - John McCready FAN                |     15 |
| New Order          | Retro - Miranda Sawyer POP               |     14 |
| New Order          | Retro - New Order / Bobby Gillespie LIVE |     15 |
| New Order          | Substance (Disc 2)                       |     12 |
| New Order          | Substance 1987 (Disc 1)                  |     12 |
| The Rolling Stones | Exile On Main Street                     |     18 |
| The Stone Roses    | Second Coming                            |     13 |
+--------------------+------------------------------------------+--------+
10 rows in set (0.00 sec)


3) Repeat Question 1, but write it as a nested query.

select artist_name, album_name, tracks from
(select artist_name, album_name, count(*) as tracks from artist
inner join album using (artist_id)
inner join track using (artist_id,album_id)
group by artist_name, album_name) as track_count
where tracks > 10;

+--------------------+------------------------------------------+--------+
| artist_name        | album_name                               | tracks |
+--------------------+------------------------------------------+--------+
| Kylie Minogue      | Light Years                              |     13 |
| Leftfield          | Leftism                                  |     11 |
| Miles Davis        | Live Around The World                    |     11 |
| New Order          | Retro - John McCready FAN                |     15 |
| New Order          | Retro - Miranda Sawyer POP               |     14 |
| New Order          | Retro - New Order / Bobby Gillespie LIVE |     15 |
| New Order          | Substance (Disc 2)                       |     12 |
| New Order          | Substance 1987 (Disc 1)                  |     12 |
| The Rolling Stones | Exile On Main Street                     |     18 |
| The Stone Roses    | Second Coming                            |     13 |
+--------------------+------------------------------------------+--------+
10 rows in set (0.00 sec)


4) What are the four types of nested queries? For each type, write a sample
query on the music database. Try to use different keywords in each query,
selecting from ANY, ALL, EXISTS (or NOT EXISTS) and IN (or NOT IN).

scalar subquery: the subquery returns a single value

Find the names of the longest tracks in the track table:

select track_name from track where time = (select max(time) from track);


column subquery: the subquery returns one or more values from a column

Find the names of the longest tracks in the track table:

select track_name from track where time >= ALL (select time from track);


row subquery: the subquery returns multiple column values from one or more rows

Find names of albums containing a track with the word 'you' in the title:

select album_name from album where (artist_id, album_id) in 
(select artist_id, album_id from track where track_name like '%you%' 
group by artist_id, album_id);


correlated subquery: the table used in the outer query is referenced in the subquery

Find names of albums containing more than 14 tracks:

select album_name from album where exists 
(select artist_id, album_id, count(*) from track 
where track.artist_id = album.artist_id and track.album_id = album.album_id 
group by artist_id, album_id having count(*) > 14);


5) What is the difference between an INNER JOIN, a LEFT JOIN, and a RIGHT
JOIN? Does the the order of tables matter in an INNER JOIN? Why or why not?

An inner join matches rows in tables based on criteria provided in a USING or an ON clause. 

A left join is similar to an inner join; it will additionally include any rows 
from the first-listed table which do not meet the join criteria. 

A right join is logically equivalent to a left join, except the order of listing
the tables is reversed.

The order of tables does not matter in an inner join because it involves identifying the rows 
which match between two tables, based on the chosen joining column(s). Rows either match 
between the two sets (i.e. tables) or they do not; the order of defining the sets is irrelevant.


6) Why do these queries give different results? What does this tell you
about using join conditions in the ON clause versus in the WHERE clause
for LEFT (and RIGHT) JOINs?

SELECT track_name, track.album_id, COUNT(played)
FROM track
LEFT JOIN played ON (track.track_id=played.track_id
AND track.album_id=played.album_id)
WHERE track.artist_id=3
GROUP BY track_name, track.album_id;

SELECT track_name, track.album_id, COUNT(played)
FROM track
LEFT JOIN played ON (track.album_id=played.album_id)
WHERE track.track_id=played.track_id
AND track.artist_id=3
GROUP BY track_name, track.album_id;

Both of these queries are performing a left outer join between the track and played
tables, i.e. they aim to return rows from the track table which do not have a 
match in the played table. The first query succeeds in this. However the second
query loses all the rows from the track table which do not have a match in the
played table because it has the 'WHERE track.track_id=played.track_id' clause 
(played.track_id will be null for the rows 'missing' from the played table).

For an outer join to succeed the join conditions should be specified in the ON
clause rather than the WHERE clause.





